package com.websocket;

import java.util.HashMap;
import java.util.HashSet;

import jakarta.websocket.OnClose;
import jakarta.websocket.OnError;
import jakarta.websocket.OnMessage;
import jakarta.websocket.OnOpen;
import jakarta.websocket.Session;
import jakarta.websocket.server.ServerEndpoint;

@ServerEndpoint("/myserver")
public class MyServer {
	private static HashSet<Session> sessions = null;
	private static HashMap<String, Session> users = null;

	public MyServer() {
		if (sessions == null) {
			sessions = new HashSet<Session>();
			users = new HashMap<String, Session>();
		}
	}

	@OnOpen
	public void onOpen(Session session) {
		System.out.println("Client connected.");
		System.out.println("Client source: " + session.getRequestURI().getHost());
		if (sessions.add(session)) {
			users.put(session.getId(), session);
		}

		System.out.println("User count: " + sessions.size());
		System.out.println("User count: " + sessions.size());
	}

	@OnMessage
	public void onMessage(String message, Session from_session) {
		System.out.println("message: " + message);
		
		for (Session session : sessions) {
			session.getBasicRemote().sendText(message);
		}
	}

	@OnError
	public void onError(Throwable throwable) {
		throwable.printStackTrace();
	}

	@OnClose
	public void onClose(Session session) {
		users.remove(session.getId());
		sessions.remove(session);
	}
}
